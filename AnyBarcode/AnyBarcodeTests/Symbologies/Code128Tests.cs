using AnyBarcode;
using NUnit.Framework;

namespace AnyBarcodeTests.Symbologies
{
    public class Code128Tests
    {
        private readonly Barcode _barcode = new Barcode
        {
            BarcodeType = BarcodeType.Code128,
        };

        [Test]
        [TestCase("hello", "110100100001001100001010110010000110010100001100101000010001111010100010011001100011101011", null, "110100100001001100001010110010000110010100001100101000010001111010100010011001100011101011", null)]
        [TestCase
        [TestCase
        [TestCase("thisisalongerstring1212121212", "1101001000010011110100100110000101000011010010111100100100001101001011110010010010110000110010100001000111101011000010100100110100001011001000010010011110101111001001001111010010010011110100001101001100001010010011010000101110111101011001110010110011100101100111001011001110010110011100100011000101100011101011", null, "110100100001001111010010011000010100001101001011110010010000110100101111001001001011000011001010000100011110101100001010010011010000101100100001001001111010111100100100111101001001001111010000110100110000101001001101000010011100110110011100101001110011011001110010100111001101100111001010011100110110011100101001110011011001110010110001000101100011101011", null)]
        [TestCase("fighting!", "1101001000010110000100100001101001001101000010011000010100111101001000011010011000010100100110100001110101111011001101100100100011001100011101011", null, "11010010000101100001001000011010010011010000100110000101001111010010000110100110000101001001101000011001101100110111001001100011101011", null)]
        [TestCase("파이팅!", null, null, null, null)]
        [TestCase("ファイト！", null, null, null, null)]
        [TestCase("\u0012", "1101000010010010011110100100111101100011101011", "1101000010010010011110100100111101100011101011", null, null)]
        [TestCase("\u0014", "1101000010010011110100100111101001100011101011", "1101000010010011110100100111101001100011101011", null, null)]
        [TestCase("this\u0012is\u0014weird", "110100100001001111010010011000010100001101001011110010011101011110100100111101011110111010000110100101111001001110101111010011110100101111011101111001010010110010000100001101001001001111010000100110101100010001100011101011", null, null, null)]
        public void EncodeBarcode(string data, string expectedAuto, string expectedA, string expectedB, string expectedC)
        {
            AssertByType(BarcodeType.Code128, expectedAuto);
            AssertByType(BarcodeType.Code128A, expectedA);
            AssertByType(BarcodeType.Code128B, expectedB);
            AssertByType(BarcodeType.Code128C, expectedC);

            void AssertByType(BarcodeType type, string expected)
            {
                _barcode.BarcodeType = type;

                string? actual = null;
                try
                {
                    actual = _barcode.GenerateBarcode(data);
                }
                catch when (expected == null)
                {
                }
                Assert.That(expected, Is.EqualTo(actual), $"{type}");
            }
        }
    }
}
